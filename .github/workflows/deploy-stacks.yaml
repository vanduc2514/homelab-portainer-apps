name: Deploy stacks to Portainer

on:
  push:
    branches:
      - main

jobs:
  generate-deployment-stacks-matrix:
    name: Generate deployment stacks matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has_stacks: ${{ steps.set-matrix.outputs.has_stacks }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # This step scans the stacks directory for subdirectories containing a docker-compose.yml file.
      # It constructs a JSON matrix of these stacks, setting outputs for use in subsequent steps.
      # Example: If the stacks directory contains "stack1" and "stack2" with docker-compose.yml files,
      # the resulting matrix will be:
      # {
      #   "include": [
      #     {"stack_name": "stack1", "stack_compose_path": "stacks/stack1/docker-compose.yml"},
      #     {"stack_name": "stack2", "stack_compose_path": "stacks/stack2/docker-compose.yml"}
      #   ]
      # }
      - name: Generate matrix from stacks directory 
        id: set-matrix
        shell: bash
        run: |
          echo "Scanning for stacks..."
          matrix='{"include":['
          first=1
          has_stacks=false
          for dir in stacks/*; do
            if [ -d "$dir" ] && [ -f "$dir/docker-compose.yml" ]; then
              has_stacks=true
              stack_name=$(basename "$dir")
              stack_compose_path="$dir/docker-compose.yml"
              if [ $first -eq 1 ]; then
                first=0
              else
                matrix+=","
              fi
              matrix+="{\"stack_name\":\"${stack_name}\",\"stack_compose_path\":\"${stack_compose_path}\"}"
              echo "Found stack: ${stack_name} at ${stack_compose_path}"
            fi
          done
          matrix+=']}'
          echo "Resulting matrix: $matrix"
          echo "::set-output name=matrix::$matrix"
          echo "::set-output name=has_stacks::$has_stacks"

  deploy-stacks-matrix:
    name: Deploy Stacks to Portainer
    needs: generate-deployment-stacks-matrix
    if: ${{ needs.generate-deployment-stacks-matrix.outputs.has_stacks == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      GITHUB_REF: ${{ github.ref }}
    strategy:
      matrix: ${{ fromJson(needs.generate-deployment-stacks-matrix.outputs.matrix) }}
    # Loop through each element in the include matrix generated from the previous stage
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Change to stack directory
        id: change-directory
        run: cd $(dirname "${{ matrix.stack_compose_path }}")
      
      - name: Normalize stack name
        # Example: If stack name is gateway then normalized name will be `STACK_GATEWAY`. 
        # If stack name is ai-model then normalized name will be STACK_AI_MODEL
        id: normalize-stack-name
        run: |
          echo "::set-output name=normalized_stack_name::STACK_$(echo '${{ matrix.stack_name }}' \
          | tr ' ' '_' \
          | tr '-' '_' \
          | tr '[:lower:]' '[:upper:]')"

      - name: Create .env file
        # This step navigates to the parent directory of the docker-compose.yml file
        # and creates a .env file with environment variables retrieved from a GitHub secret dynamically from the task name.
        id: create-env-file
        run: echo "${{ secrets[steps.normalize-stack-name.outputs.normalized_stack_name] }}" > .env
        shell: bash

      - name: Deploy stack to Portainer
        id: deploy-to-portainer
        uses: vanduc2514/portainer-stack-deploy-action@v1.0.1
        with:
          url: ${{ vars.PORTAINER_HOST }}
          token: ${{ secrets.PORTAINER_TOKEN }}
          type: repo
          standalone: true
          ref: refs/heads/main
          name: ${{ matrix.stack_name }}
          file: ${{ matrix.stack_compose_path }}
          env_file: .env
          fs_path: /mnt
